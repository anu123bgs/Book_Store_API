@page "/books/delete/{id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IBookRepository bookRepo_
@inject NavigationManager navManager_

<h3 class="card-title">Are you sure you want to Delete this Book?</h3>
<br />
<hr />
<br />
@if (isFailed)
{
    <ErrorMessage Message="Something went wrong while deleting Book." />
}

@if (Model == null)
{
    <LoadingMessage Message="Loading Books for Deletion" />
}
else
{
    <div class="col-md-4">
        <h4>Book Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>Title</td>
                <td>@Model.Title</td>
            </tr>
            <tr>
                <td>Summary</td>
                <td>@Model.Summary</td>
            </tr>
            <tr>
                <td>ISBN</td>
                <td>@Model.Isbn</td>
            </tr>
        </table>
        <br />        
    </div>
}
<button @onclick="DeleteBook" class="btn btn-danger">
    <span class="oi oi-delete"></span>
    Delete Record
</button>
<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-arrow-left"></span>
    Back To List
</button>

@code {
    [Parameter]
    public string Id { get; set; }
    private Book Model = new Book();
    private bool isFailed = false;
    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await bookRepo_.Get(EndPoints.BooksEndpoint, id);
    }
    private async Task DeleteBook()
    {
        int id = int.Parse(Id);
        bool success = await bookRepo_.Delete(EndPoints.BooksEndpoint, Model.Id);
        if (success)
            BackToList();
        else
            isFailed = true;
    }
    private void BackToList()
    {
        navManager_.NavigateTo("/books/");
    }
}
