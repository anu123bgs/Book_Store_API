@page "/authors/"

@inject IAuthorRepository authorRepo_
<h3>Index</h3>
<br/>
<hr/>
<br />
@if (Model == null)
{
    <LoadingMessage Message="Loading Authors.." />
}
else
{
    <AuthorizeView Roles="Administrator">
        <a href="/authors/create" class="btn btn-primary">
            <span class="oi oi-plus"></span>
            Create New Author
        </a>
    </AuthorizeView>
    @if (Model.Count < 1)
    {
        <LoadingMessage Message="There is no Author available currently.
                        Create author to begin." />
    }
    else
    {
        <table class="table-responsive">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Model)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>
                            <a href="/authors/view/@author.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <AuthorizeView Roles="Administrator">
                                <a href="/authors/edit/@author.Id" class="btn btn-warning">
                                    <span class="oi oi-pencil"></span>
                                </a>
                                <a href="/authors/delete/@author.Id" class="btn btn-danger">
                                    <span class="oi oi-delete"></span>
                                </a>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        }
    }
@code {
    private IList<Author> Model;
    protected override async Task OnInitializedAsync()
    {
        Model = await authorRepo_.Get(EndPoints.AuthorsEndpoint);
    }
}
