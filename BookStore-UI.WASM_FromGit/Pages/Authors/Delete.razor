@page "/authors/delete/{id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository authorRepo_
@inject NavigationManager navManager_

<h3 class="card-title">Are you sure you want to Delete this Author?</h3>
<br />
<hr />
<br />
@if (isFailed)
{
    <ErrorMessage Message="Something went wrong while deleting Author." />
}

@if (Model == null)
{
    <LoadingMessage Message="Loading Authors for Deletion" />
}
else
{
    <div class="col-md-4">
        <h4>Author Details</h4>
        <table class="table table-responsive">
            <tr>
                <td>First Name</td>
                <td>@Model.FirstName</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@Model.LastName</td>
            </tr>
            <tr>
                <td>Biography</td>
                <td>@Model.Bio</td>
            </tr>
        </table>
        <br />
        @if (Model.Books == null || Model.Books.Count < 1)
        {
            <div class="alert alert-dismissible alert-secondary">
                No Books For this Author
            </div>
        }
        else
        {
            <div class="card" style="width: 18rem;">
                <div class="card-header">
                    <h4>Author's Books</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var book in Model.Books)
                    {
                        <li class="list-group-item">@book.Title - @book.Price</li>
                    }
                </ul>
            </div>
        }
    </div>
}
<button @onclick="DeleteAuthor" class="btn btn-danger">
    <span class="oi oi-delete"></span>
    Delete Record
</button>
<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-arrow-left"></span>
    Back To List
</button>

@code {
    [Parameter]
    public string Id { get; set; }
    private Author Model = new Author();
    private bool isFailed = false;
    protected override async Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await authorRepo_.Get(EndPoints.AuthorsEndpoint, id);
    }
    private async Task DeleteAuthor()
    {
        int id = int.Parse(Id);
        bool success = await authorRepo_.Delete(EndPoints.AuthorsEndpoint, Model.Id);
        if (success)
            BackToList();
        else
            isFailed = true;
    }
    private void BackToList()
    {
        navManager_.NavigateTo("/authors/");
    }
}
